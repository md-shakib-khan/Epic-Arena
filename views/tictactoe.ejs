<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tic Tac Toe</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #1f2937;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      .room-container {
        margin-bottom: 20px;
        text-align: center;
      }

      .room-input {
        padding: 8px 15px;
        font-size: 16px;
        margin-right: 10px;
        border: 2px solid #333;
        border-radius: 4px;
      }

      .submit-button {
        padding: 8px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
      }

      .submit-button:hover {
        background-color: #218838;
      }

      .board {
        display: grid;
        grid-template-columns: repeat(3, 100px);
        grid-template-rows: repeat(3, 100px);
        gap: 5px;
        width: 320px;
        margin: 20px auto;
      }

      .cell {
        width: 100px;
        height: 100px;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
        border: 2px solid #333;
        cursor: pointer;
      }

      .cell.taken {
        pointer-events: none; /* Disable clicking after a move */
      }
    </style>
  </head>
  <body>
    <!-- Room ID and Submit Button -->
    <div class="room-container">
      <input
        type="text"
        id="roomId"
        class="room-input"
        placeholder="Enter Room ID"
      />
      <button id="startGame" class="submit-button">Start Game</button>
    </div>

    <div id="AnotherUserID"></div>

    <!-- Game Board -->
    <div class="board" id="board" style="display: none"></div>

    <!-- Include the Socket.IO client -->
    <script src="/socket.io/socket.io.js"></script>

    <script>
      const board = document.getElementById("board");
      const cells = Array(9).fill(null);
      const startButton = document.getElementById("startGame");
      const roomInput = document.getElementById("roomId");
      const anotherUserID = document.getElementById("AnotherUserID");

      let currentPlayer = "X"; // Player X starts
      let roomJoined = false;

      // Create the cells and append them to the board
      cells.forEach((_, index) => {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.dataset.index = index;
        board.appendChild(cell);

        // Add click event listener to each cell
        cell.addEventListener("click", () => handleCellClick(cell, index));
      });

      // Start game when the submit button is clicked
      startButton.addEventListener("click", () => {
        const roomId = roomInput.value.trim();
        if (roomId) {
          socket.emit("JoinRoom", roomId, (res) => {
            if (res.success) {
              roomJoined = true;
              document.querySelector(".room-container").style.display = "none";
              board.style.display = "grid";
            } else {
              anotherUserID.innerHTML = "Sorry It's Full";
            }
          });
        } else {
          alert("Please Enter Room ID");
        }
      });

      function handleCellClick(cell, index) {
        // Check if the cell is already taken
        if (cells[index]) return;

        // Mark the cell with the current player's symbol
        cells[index] = currentPlayer;
        cell.textContent = currentPlayer;

        // Add class to mark the cell as taken (no more clicks)
        cell.classList.add("taken");

        // Emit the move to the server
        socket.emit("makeMove", { room: roomInput.value.trim(), index, player: currentPlayer });

        // Check for a winner after each move
        if (checkWinner(currentPlayer)) {
          setTimeout(() => {
            alert(`${currentPlayer} wins!`);
            resetGame();
          }, 100);
        }

        // Switch player
        currentPlayer = currentPlayer === "X" ? "O" : "X";
      }

      // Function to check if there's a winner
      function checkWinner(player) {
        const winPatterns = [
          [0, 1, 2], // Top row
          [3, 4, 5], // Middle row
          [6, 7, 8], // Bottom row
          [0, 3, 6], // Left column
          [1, 4, 7], // Center column
          [2, 5, 8], // Right column
          [0, 4, 8], // Diagonal (top-left to bottom-right)
          [2, 4, 6], // Diagonal (top-right to bottom-left)
        ];

        return winPatterns.some(pattern =>
          pattern.every(index => cells[index] === player)
        );
      }

      // Reset game to initial state
      function resetGame() {
        cells.fill(null);
        Array.from(board.children).forEach(cell => {
          cell.textContent = '';
          cell.classList.remove('taken');
        });
        currentPlayer = "X";
        board.style.display = "none";
        document.querySelector(".room-container").style.display = "block";
        anotherUserID.innerHTML = "";
      }

      // Connect to the server using Socket.IO
      const socket = io();

      // Listen for a move made by another player and update the board
      socket.on("moveMade", (data) => {
        const { index, player } = data;
        cells[index] = player;
        const cell = board.children[index];
        cell.textContent = player;
        cell.classList.add("taken");

        // Check for winner after the move
        if (checkWinner(player)) {
          setTimeout(() => {
            alert(`${player} wins!`);
            resetGame();
          }, 100);
        }

        // Switch player after the move
        currentPlayer = player === "X" ? "O" : "X";
      });

      // Notify when another user joins or leaves the room
      socket.on("userJoined", (data) => {
        anotherUserID.innerHTML = "User joined: " + data;
      });

      socket.on("userLeft", (data) => {
        anotherUserID.innerHTML = "User left: " + data;
      });
    </script>
  </body>
</html>
